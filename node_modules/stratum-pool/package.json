{
  "_args": [
    [
      {
        "raw": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
        "spec": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:StarbuckBG/node-stratum-pool.git",
          "sshUrl": "git+ssh://git@github.com/StarbuckBG/node-stratum-pool.git",
          "httpsUrl": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
          "gitUrl": "git://github.com/StarbuckBG/node-stratum-pool.git",
          "shortcut": "github:StarbuckBG/node-stratum-pool",
          "directUrl": "https://raw.githubusercontent.com/StarbuckBG/node-stratum-pool/master/package.json"
        }
      },
      "/home/bithereum/z-nomp-bitcoin-gold"
    ]
  ],
  "_from": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
  "_id": "stratum-pool@0.1.6",
  "_inCache": true,
  "_location": "/stratum-pool",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
    "spec": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:StarbuckBG/node-stratum-pool.git",
      "sshUrl": "git+ssh://git@github.com/StarbuckBG/node-stratum-pool.git",
      "httpsUrl": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
      "gitUrl": "git://github.com/StarbuckBG/node-stratum-pool.git",
      "shortcut": "github:StarbuckBG/node-stratum-pool",
      "directUrl": "https://raw.githubusercontent.com/StarbuckBG/node-stratum-pool/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/StarbuckBG/node-stratum-pool.git#946a22466e3b7d7bd0c8708b86c63b4c041ab7d8",
  "_shasum": "96f9a208116d5f91c735474f1583ac599872eda1",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/StarbuckBG/node-stratum-pool.git",
  "_where": "/home/bithereum/z-nomp-bitcoin-gold",
  "author": {
    "name": "Matthew Little"
  },
  "bugs": {
    "url": "https://github.com/joshuayabut/node-stratum-pool/issues"
  },
  "contributors": [
    {
      "name": "vekexasia"
    },
    {
      "name": "TheSeven"
    }
  ],
  "dependencies": {
    "async": "*",
    "base58-native": "*",
    "bignum": "*",
    "bitcoinjs-lib-zcash": "git+https://github.com/runn1ng/bitcoinjs-lib.git#zcash",
    "equihashverify": "git+https://github.com/StarbuckBG/equihashverify.git",
    "merkle-bitcoin": "git+https://github.com/joshuayabut/merkle-bitcoin.git",
    "promise": "*"
  },
  "description": "High performance Stratum poolserver in Node.js",
  "devDependencies": {},
  "engines": {
    "node": ">=7"
  },
  "gitHead": "946a22466e3b7d7bd0c8708b86c63b4c041ab7d8",
  "homepage": "https://github.com/joshuayabut/node-stratum-pool",
  "keywords": [
    "stratum",
    "mining",
    "pool",
    "server",
    "poolserver",
    "bitcoin",
    "litecoin",
    "scrypt"
  ],
  "license": "GPL-2.0",
  "main": "lib/index.js",
  "name": "stratum-pool",
  "optionalDependencies": {},
  "readme": "High performance Stratum poolserver for equihash in Node.js. One instance of this software can startup and manage multiple coin\npools, each with their own daemon and stratum port :)\n\n#### Notice\nThis is a module for Node.js that will do nothing on its own. Unless you're a Node.js developer who would like to\nhandle stratum authentication and raw share data then this module will not be of use to you. For a full featured portal\nthat uses this module, see [Z-NOMP (Z Node Open Mining Portal)](https://github.com/z-classic/z-nomp). It\nhandles payments, website front-end, database layer, mutli-coin/pool support, auto-switching miners between coins/pools,\netc.. The portal also has an [MPOS](https://github.com/MPOS/php-mpos) compatibility mode so that the it can function as\na drop-in-replacement for [python-stratum-mining](https://github.com/Crypto-Expert/stratum-mining).\n\n[![Build Status](https://travis-ci.org/zone117x/node-stratum-pool.png?branch=master)](https://travis-ci.org/zone117x/node-stratum-pool)\n\n[![NPM](https://nodei.co/npm/stratum-pool.png?downloads=true&stars=true)](https://nodei.co/npm/stratum-pool/)\n\n#### Why\nThis server was built to be more efficient and easier to setup, maintain and scale than existing stratum poolservers\nwhich are written in python. Compared to the spaghetti state of the latest\n[stratum-mining python server](https://github.com/Crypto-Expert/stratum-mining/), this software should also have a\nlower barrier to entry for other developers to fork and add features or fix bugs.\n\n\nFeatures\n----------------------------------\n* Daemon RPC interface\n* Stratum TCP socket server\n* Block template / job manager\n* P2P to get block notifications as peer node\n* Optimized generation transaction building\n* Connecting to multiple daemons for redundancy\n* Process share submissions\n* Session managing for purging DDoS/flood initiated zombie workers\n* Auto ban IPs that are flooding with invalid shares\n* __POW__ (proof-of-work) & __POS__ (proof-of-stake) support\n* Transaction messages support\n* Vardiff (variable difficulty / share limiter)\n* When started with a coin deamon that hasn't finished syncing to the network it shows the blockchain download progress and initializes once synced\n\n#### Hashing algorithms supported:\n* âœ“ __Equihash__ (Zclassic, Zcash)\n\nRequirements\n------------\n* node v7+\n* coin daemon (preferably one with a relatively updated API and not some crapcoin :p)\n\n\nExample Usage\n-------------\n\n#### Install as a node module by cloning repository\n\n```bash\ngit clone https://github.com/z-classic/node-stratum-pool node_modules/stratum-pool\nnpm update\n```\n\n#### Module usage\n\nCreate the configuration for your coin:\n\nPossible options for `algorithm`: *equihash*.\n\n```javascript\nvar myCoin = {\n    \"name\": \"Dogecoin\",\n    \"symbol\": \"DOGE\",\n    \"algorithm\": \"scrypt\",\n    \"nValue\": 1024, //optional - defaults to 1024\n    \"rValue\": 1, //optional - defaults to 1\n    \"txMessages\": false, //optional - defaults to false,\n\n    /* Magic value only required for setting up p2p block notifications. It is found in the daemon\n       source code as the pchMessageStart variable.\n       For example, litecoin mainnet magic: http://git.io/Bi8YFw\n       And for litecoin testnet magic: http://git.io/NXBYJA */\n     \"peerMagic\": \"fbc0b6db\" //optional\n     \"peerMagicTestnet\": \"fcc1b7dc\" //optional\n};\n```\n\nIf you are an equihash coin that doesn't have any founder's rewards,\n\n```javascript\nvar myCoin = {\n    \"name\": \"Zclassic\",\n    \"symbol\": \"ZCL\",\n    \"algorithm\": \"equihash\",\n};\n```\n\nIf you are using an equihash coin that has founder's rewards, you need to include details about the FR system,\n```javascript\nvar myCoin = {\n    \"name\": \"zcash_testnet\",\n    \"symbol\": \"taz\",\n    \"algorithm\": \"equihash\",\n\n    \"payFoundersReward\": true,\n    \"percentFoundersReward\": 20,\n    \"maxFoundersRewardBlockHeight\": 849999,\n    \"foundersRewardAddressChangeInterval\": 17709.3125,\n\t\"vFoundersRewardAddress\": [\n\t\t\"t2UNzUUx8mWBCRYPRezvA363EYXyEpHokyi\",\n\t\t\"t2N9PH9Wk9xjqYg9iin1Ua3aekJqfAtE543\",\n\t\t\"t2NGQjYMQhFndDHguvUw4wZdNdsssA6K7x2\",\n\t\t\"t27ktmq1kbeCWiQ5TZ7w5npSzcdbBmTB7v6\",\n\t\t\"t2GcBttAKD2WTHka8HyGc2dfvVTKYZUfHmJ\",\n\t\t\"t2Q3vxWaD9LrdqUE8Xd9Ddjpr9pUQ2aGotK\",\n\t\t\"t2TTfWDsYu998fHWzVP9Gns4fgxXXRi1Wzu\",\n\t\t\"t2KS6R4MMWdSBMjLCiw2iMyhWGRQPmyRqDn\",\n\t\t\"t2Q2ELrgotWv3Eec6LEtMMiiQ8dtW38u8Tj\",\n\t\t\"t2AEgJA88vTWAKqxJDFUEJWyHUtQAZi5G1D\",\n\t\t\"t2HCSdmpq1TQKksuwPQevwAzPTgfJ2rkMbG\",\n\t\t\"t2HQCPFAUQaUdJWHPhg5pPBxit7inaJzubE\",\n\t\t\"t2Fzqvq8Y9e6Mn3JNPb982aYsLmq4b5HmhH\",\n\t\t\"t2HEz7YZQqDUgC5h4y2WSD3mWneqJNVRjjJ\",\n\t\t\"t2GCR1SCk687Eeo5NEZ23MLsms7JjVWBgfG\",\n\t\t\"t2KyiPR9Lztq2w1w747X6W4nkUMAGL8M9KN\",\n\t\t\"t2UxymadyxSyVihmbq7S1yxw5dCBqJ1S4jT\",\n\t\t\"t2AVeMy7fdmTcJhckqiKRG8B7F1vccEhSqU\",\n\t\t\"t26m7LwihQzD2sH7ZVhYpPJM5j7kzwbfKW9\",\n\t\t\"t2DgwUNTe7NxuyPU6fxsB5xJXap3E4yWXrN\",\n\t\t\"t2U6funcXA11fC9SZehyvUL3rk3Vhuh7fzS\",\n\t\t\"t284JhyS8LGM72Tx1porSqwrcq3CejthP1p\",\n\t\t\"t29egu8QcpzKeLoPLqWS6QVMnUUPQdF6eNm\",\n\t\t\"t29LqD9p9D3B26euBwFi6mfcWu8HPA38VNs\",\n\t\t\"t28GsAMCxAyLy85XaasddDzaYFTtfewr86y\",\n\t\t\"t2GV44QyaikQPLUfm6oTfZnw71LLjnR7gDG\",\n\t\t\"t2U2QzNLQ1jtAu4L6xxVnRXLBsQpQvGRR2g\",\n\t\t\"t2QKGr5PNan7nrwDgseyHMN9NFeeuUjCh8b\",\n\t\t\"t2AfS8u6HwBeJpKpbuxztvRjupKQDXqnrwa\",\n\t\t\"t2CTRQUViQd3CWMhnKhFnUHqDLUyTxmWhJs\",\n\t\t\"t2CbM9EqszNURqh1UXZBXYhwp1R4GwEhWRE\",\n\t\t\"t2LM7uYiAsKDU42GNSnMwDxbZ8s1DowQzYH\",\n\t\t\"t2AgvT35LHR378AE3ouz6xKMhkTLHLJC6nD\",\n\t\t\"t285EAQXUVyi4NMddJv2QqTrnv45GRMbP8e\",\n\t\t\"t2EpMRCD5b8f2DCQ37npNULcpZhkjC8muqA\",\n\t\t\"t2BCmWXrRPiCeQTpizSWKKRPM5X6PS7umDY\",\n\t\t\"t2DN7X6wDFn5hYKBiBmn3Z98st419yaTVTH\",\n\t\t\"t2QJj8HeCwQ6mHwqekxxDLZntYpZTHNU62t\",\n\t\t\"t2QdHBR1Yciqn4j8gpS8DcQZZtYetKvfNj3\",\n\t\t\"t2E5cpLA1ey5VNxFNcuopeQMq2rH2NHiPdu\",\n\t\t\"t2EVRGtzjFAyz8CF8ndvLuiJu7qZUfDa93H\",\n\t\t\"t2KoQDk3BSFadBkuaWdLwchFuQamzw9RE4L\",\n\t\t\"t2FnR3yhTmuiejEJeu6qpidWTghRd1HpjLt\",\n\t\t\"t2BAuBAAospDc9d1u5nNGEi6x4NRJBD2PQ2\",\n\t\t\"t2RtKrLCGcyPkm4a4APg1YY9Wu2m4R2PgrB\",\n\t\t\"t28aUbSteZzBq2pFgj1K1XNZRZP5mMMyakV\",\n\t\t\"t2Urdy1ERfkvsFuy6Z4BkhvYGzWdmivfAFR\",\n\t\t\"t2ADinR4JrvCMd4Q1XGALPajzFrirqvhED6\"\n\t]\n};\n```\n\nCreate and start new pool with configuration options and authentication function\n\n```javascript\nvar Stratum = require('stratum-pool');\n\nvar pool = Stratum.createPool({\n\n    \"coin\": myCoin,\n\n    \"address\": \"mi4iBXbBsydtcc5yFmsff2zCFVX4XG7qJc\", //Address to where block rewards are given\n\n    /* Block rewards go to the configured pool wallet address to later be paid out to miners,\n       except for a percentage that can go to, for examples, pool operator(s) as pool fees or\n       or to donations address. Addresses or hashed public keys can be used. Here is an example\n       of rewards going to the main pool op, a pool co-owner, and NOMP donation. */\n    \"rewardRecipients\": {\n        \"n37vuNFkXfk15uFnGoVyHZ6PYQxppD3QqK\": 1.5, //1.5% goes to pool op\n        \"mirj3LtZxbSTharhtXvotqtJXUY7ki5qfx\": 0.5, //0.5% goes to a pool co-owner\n    },\n\n    \"blockRefreshInterval\": 1000, //How often to poll RPC daemons for new blocks, in milliseconds\n\n\n    /* Some miner apps will consider the pool dead/offline if it doesn't receive anything new jobs\n       for around a minute, so every time we broadcast jobs, set a timeout to rebroadcast\n       in this many seconds unless we find a new job. Set to zero or remove to disable this. */\n    \"jobRebroadcastTimeout\": 55,\n\n    //instanceId: 37, //Recommend not using this because a crypto-random one will be generated\n\n    /* Some attackers will create thousands of workers that use up all available socket connections,\n       usually the workers are zombies and don't submit shares after connecting. This features\n       detects those and disconnects them. */\n    \"connectionTimeout\": 600, //Remove workers that haven't been in contact for this many seconds\n\n    /* Sometimes you want the block hashes even for shares that aren't block candidates. */\n    \"emitInvalidBlockHashes\": false,\n\n    /* Enable for client IP addresses to be detected when using a load balancer with TCP proxy\n       protocol enabled, such as HAProxy with 'send-proxy' param:\n       http://haproxy.1wt.eu/download/1.5/doc/configuration.txt */\n    \"tcpProxyProtocol\": false,\n\n    /* If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP\n       to reduce system/network load. Also useful to fight against flooding attacks. If running\n       behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up\n       banning your own IP address (and therefore all workers). */\n    \"banning\": {\n        \"enabled\": true,\n        \"time\": 600, //How many seconds to ban worker for\n        \"invalidPercent\": 50, //What percent of invalid shares triggers ban\n        \"checkThreshold\": 500, //Check invalid percent when this many shares have been submitted\n        \"purgeInterval\": 300 //Every this many seconds clear out the list of old bans\n    },\n\n    /* Each pool can have as many ports for your miners to connect to as you wish. Each port can\n       be configured to use its own pool difficulty and variable difficulty settings. varDiff is\n       optional and will only be used for the ports you configure it for. */\n       \n       //1 Diff is 8192 network. IE: .5 diff is actually 4096. 2 diff is 16384\n       \n    \"ports\": {\n        \"3032\": { //A port for your miners to connect to\n            \"diff\": 0.125, //the pool difficulty for this port\n\n            /* Variable difficulty is a feature that will automatically adjust difficulty for\n               individual miners based on their hashrate in order to lower networking overhead */\n            \"varDiff\": {\n                \"minDiff\": 0.125, //Minimum difficulty\n                \"maxDiff\": 512, //Network difficulty will be used if it is lower than this\n                \"targetTime\": 15, //Try to get 1 share per this many seconds\n                \"retargetTime\": 90, //Check to see if we should retarget every this many seconds\n                \"variancePercent\": 30 //Allow time to very this % from target without retargeting\n            }\n        },\n        \"3256\": { //Another port for your miners to connect to, this port does not use varDiff\n            \"diff\": 256 //The pool difficulty\n        }\n    },\n\n    /* Recommended to have at least two daemon instances running in case one drops out-of-sync\n       or offline. For redundancy, all instances will be polled for block/transaction updates\n       and be used for submitting blocks. Creating a backup daemon involves spawning a daemon\n       using the \"-datadir=/backup\" argument which creates a new daemon instance with it's own\n       RPC config. For more info on this see:\n          - https://en.bitcoin.it/wiki/Data_directory\n          - https://en.bitcoin.it/wiki/Running_bitcoind */\n    \"daemons\": [\n        {   //Main daemon instance\n            \"host\": \"127.0.0.1\",\n            \"port\": 19332,\n            \"user\": \"litecoinrpc\",\n            \"password\": \"testnet\"\n        },\n        {   //Backup daemon instance\n            \"host\": \"127.0.0.1\",\n            \"port\": 19344,\n            \"user\": \"litecoinrpc\",\n            \"password\": \"testnet\"\n        }\n    ],\n\n\n    /* This allows the pool to connect to the daemon as a node peer to receive block updates.\n       It may be the most efficient way to get block updates (faster than polling, less\n       intensive than blocknotify script). It requires the additional field \"peerMagic\" in\n       the coin config. */\n    \"p2p\": {\n        \"enabled\": false,\n\n        /* Host for daemon */\n        \"host\": \"127.0.0.1\",\n\n        /* Port configured for daemon (this is the actual peer port not RPC port) */\n        \"port\": 19333,\n\n        /* If your coin daemon is new enough (i.e. not a shitcoin) then it will support a p2p\n           feature that prevents the daemon from spamming our peer node with unnecessary\n           transaction data. Assume its supported but if you have problems try disabling it. */\n        \"disableTransactions\": true\n\n    }\n\n}, function(ip, port , workerName, password, callback){ //stratum authorization function\n    console.log(\"Authorize \" + workerName + \":\" + password + \"@\" + ip);\n    callback({\n        error: null,\n        authorized: true,\n        disconnect: false\n    });\n});\n```\n\n\nListen to pool events\n```javascript\n/*\n\n'data' object contains:\n    job: 4, //stratum work job ID\n    ip: '71.33.19.37', //ip address of client\n    port: 3333, //port of the client\n    worker: 'matt.worker1', //stratum worker name\n    height: 443795, //block height\n    blockReward: 5000000000, //the number of satoshis received as payment for solving this block\n    difficulty: 64, //stratum worker difficulty\n    shareDiff: 78, //actual difficulty of the share\n    blockDiff: 3349, //block difficulty adjusted for share padding\n    blockDiffActual: 3349 //actual difficulty for this block\n\n\n    //AKA the block solution - set if block was found\n    blockHash: '110c0447171ad819dd181216d5d80f41e9218e25d833a2789cb8ba289a52eee4',\n\n    //Exists if \"emitInvalidBlockHashes\" is set to true\n    blockHashInvalid: '110c0447171ad819dd181216d5d80f41e9218e25d833a2789cb8ba289a52eee4'\n\n    //txHash is the coinbase transaction hash from the block\n    txHash: '41bb22d6cc409f9c0bae2c39cecd2b3e3e1be213754f23d12c5d6d2003d59b1d,\n\n    error: 'low share difficulty' //set if share is rejected for some reason\n*/\npool.on('share', function(isValidShare, isValidBlock, data){\n\n    if (isValidBlock)\n        console.log('Block found');\n    else if (isValidShare)\n        console.log('Valid share submitted');\n    else if (data.blockHash)\n        console.log('We thought a block was found but it was rejected by the daemon');\n    else\n        console.log('Invalid share submitted')\n\n    console.log('share data: ' + JSON.stringify(data));\n});\n\n\n\n/*\n'severity': can be 'debug', 'warning', 'error'\n'logKey':   can be 'system' or 'client' indicating if the error\n            was caused by our system or a stratum client\n*/\npool.on('log', function(severity, logKey, logText){\n    console.log(severity + ': ' + '[' + logKey + '] ' + logText);\n});\n```\n\nStart pool\n```javascript\npool.start();\n```\n\n\nCredits\n-------\n* [vekexasia](//github.com/vekexasia) - co-developer & great tester\n* [LucasJones](//github.com/LucasJones) - got p2p block notify working and implemented additional hashing algos\n* [TheSeven](//github.com/TheSeven) - answering an absurd amount of my questions, found the block 1-16 problem, provided example code for peer node functionality\n* [pronooob](https://dogehouse.org) - knowledgeable & helpful\n* [Slush0](//github.com/slush0/stratum-mining) - stratum protocol, documentation and original python code\n* [viperaus](//github.com/viperaus/stratum-mining) - scrypt adaptions to python code\n* [ahmedbodi](//github.com/ahmedbodi/stratum-mining) - more algo adaptions to python code\n* [steveshit](//github.com/steveshit) - ported X11 hashing algo from python to node module\n\n\nDonations\n---------\nTo support development of this project feel free to donate :)\n\n* BTC: `1KRotMnQpxu3sePQnsVLRy3EraRFYfJQFR`\n* LTC: `LKfavSDJmwiFdcgaP1bbu46hhyiWw5oFhE`\n* VTC: `VgW4uFTZcimMSvcnE4cwS3bjJ6P8bcTykN`\n* MAX: `mWexUXRCX5PWBmfh34p11wzS5WX2VWvTRT`\n* QRK: `QehPDAhzVQWPwDPQvmn7iT3PoFUGT7o8bC`\n* DRK: `XcQmhp8ANR7okWAuArcNFZ2bHSB81jpapQ`\n* DOGE: `DBGGVtwAAit1NPZpRm5Nz9VUFErcvVvHYW`\n* Cryptsy Trade Key: `254ca13444be14937b36c44ba29160bd8f02ff76`\n\nLicense\n-------\nReleased under the GNU General Public License v2\n\nhttp://www.gnu.org/licenses/gpl-2.0.html\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joshuayabut/node-stratum-pool.git"
  },
  "version": "0.1.6"
}
