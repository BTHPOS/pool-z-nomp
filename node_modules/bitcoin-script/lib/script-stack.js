"use strict";

var bigInt = require("big-integer");
var ecdsa = require("ecdsa");
var config = require("./config.js");
var crypto = require("./crypto.js");

function StackEmptyException() {
  this.toString = function () {
    return "Attempted to pop from an empty stack.";
  };
}

var serialize = function (data) {
  return data.toString(config.base);
};
var deserialize = function (data) {
  return bigInt(data, config.base);
};

var ScriptStack = (function () {
  var ScriptStack = function ScriptStack() {};

  ScriptStack.prototype.push = function () {
    var serialized = [].map.call(arguments, serialize);
    return Array.prototype.push.apply(this, serialized);
  };

  ScriptStack.prototype.pop = function () {
    if (this.length === 0 || this.length == null) {
      throw new StackEmptyException();
    }
    return deserialize(Array.prototype.pop.apply(this));
  };

  ScriptStack.prototype.peek = function () {
    var value = this.pop();
    this.push(value);
    return value;
  };

  ScriptStack.prototype.OP_0 = function () {
    this.push(0);
  };

  ScriptStack.prototype.OP_FALSE = function () {
    this.OP_0();
  };

  ScriptStack.prototype.OP_1NEGATE = function () {
    this.OP_1();
    this.OP_NEGATE();
  };

  ScriptStack.prototype.OP_1 = function () {
    this.push(1);
  };

  ScriptStack.prototype.OP_TRUE = function () {
    this.OP_1();
  };

  ScriptStack.prototype.OP_IFDUP = function () {
    var top = this.peek();
    if (top.compare(0) !== 0) {
      this.push(top);
    }
  };

  ScriptStack.prototype.OP_DEPTH = function () {
    this.push(this.length);
  };

  ScriptStack.prototype.OP_DROP = function () {
    this.pop();
  };

  ScriptStack.prototype.OP_2DROP = function () {
    this.OP_DROP();
    this.OP_DROP();
  };

  ScriptStack.prototype.OP_DUP = function (n) {
    n = n || 1;

    // Extract top `n` values
    var values = [];
    for (var i = 0; i < n; i++) {
      values.push(this.pop());
    }
    values.reverse();

    for (var i = 0; i < 2 * n; i++) {
      this.push(values[i % values.length]);
    }
  };

  ScriptStack.prototype.OP_2DUP = function () {
    this.OP_DUP(2);
  };

  ScriptStack.prototype.OP_3DUP = function () {
    this.OP_DUP(3);
  };

  ScriptStack.prototype.OP_NIP = function () {
    var top = this.pop();
    this.pop();
    this.push(top);
  };

  ScriptStack.prototype.OP_OVER = function () {
    var top = this.pop();
    var bottom = this.peek();
    this.push(top);
    this.push(bottom);
  };

  ScriptStack.prototype.OP_PICK = function () {
    var n = this.pop();
    var temp = [];
    for (var i = 0; i < n - 1; i++) {
      temp.push(this.pop());
    }
    var nth = this.peek();
    for (var i = 0; i < n - 1; i++) {
      this.push(temp[i]);
    }
    this.push(nth);
  };

  ScriptStack.prototype.OP_ROLL = function () {
    var n = this.pop();
    var temp = [];
    for (var i = 0; i < n - 1; i++) {
      temp.push(this.pop());
    }
    var nth = this.pop();
    for (var i = 0; i < n - 1; i++) {
      this.push(temp[i]);
    }
    this.push(nth);
  };

  ScriptStack.prototype.OP_ROT = function () {
    var values = [this.pop(), this.pop(), this.pop()];
    values.reverse();
    for (var i = 0; i < values.length; i++) {
      this.push(values[(i + 1) % values.length]);
    }
  };

  ScriptStack.prototype.OP_SWAP = function () {
    var values = [this.pop(), this.pop()];
    for (var i = 0; i < values.length; i++) {
      this.push(values[i]);
    }
  };

  ScriptStack.prototype.OP_TUCK = function () {
    var values = [this.pop(), this.pop()];
    values.reverse();
    for (var i = 0; i < values.length + 1; i++) {
      this.push(values[i % values.length]);
    }
  };

  ScriptStack.prototype.OP_2OVER = function () {
    var values = [this.pop(), this.pop(), this.pop(), this.pop()];
    values.reverse();
    for (var i = 0; i < values.length + 2; i++) {
      this.push(values[i % values.length]);
    }
  };

  ScriptStack.prototype.OP_2ROT = function () {
    var values = [this.pop(), this.pop(), this.pop(), this.pop(), this.pop(), this.pop()];
    values.reverse();
    for (var i = 0; i < values.length; i++) {
      this.push(values[(i + 2) % values.length]);
    }
  };

  ScriptStack.prototype.OP_2SWAP = function () {
    var values = [this.pop(), this.pop(), this.pop(), this.pop()];
    values.reverse();
    for (var i = 0; i < values.length; i++) {
      this.push(values[(i + 2) % values.length]);
    }
  };

  ScriptStack.prototype.OP_INVERT = function () {
    this.push(this.pop().not());
  };

  ScriptStack.prototype.OP_AND = function () {
    this.push(this.pop().and(this.pop()));
  };

  ScriptStack.prototype.OP_OR = function () {
    this.push(this.pop().or(this.pop()));
  };

  ScriptStack.prototype.OP_XOR = function () {
    this.push(this.pop().xor(this.pop()));
  };

  ScriptStack.prototype.OP_EQUAL = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.equals(b)) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_1ADD = function () {
    this.push(this.pop().add(1));
  };

  ScriptStack.prototype.OP_1SUB = function () {
    this.push(this.pop().minus(1));
  };

  ScriptStack.prototype.OP_2MUL = function () {
    this.push(this.pop().multiply(2));
  };

  ScriptStack.prototype.OP_2DIV = function () {
    this.push(this.pop().divide(2));
  };

  ScriptStack.prototype.OP_NEGATE = function () {
    this.push(this.pop().multiply(-1));
  };

  ScriptStack.prototype.OP_ABS = function () {
    this.push(this.pop().abs());
  };

  ScriptStack.prototype.OP_NOT = function () {
    if (this.pop().equals(0)) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_0NOTEQUAL = function () {
    if (this.pop().equals(0)) {
      this.OP_0();
    } else {
      this.OP_1();
    }
  };

  ScriptStack.prototype.OP_ADD = function () {
    var b = this.pop();
    var a = this.pop();
    this.push(a.add(b));
  };

  ScriptStack.prototype.OP_SUB = function () {
    var b = this.pop();
    var a = this.pop();
    this.push(a.minus(b));
  };

  ScriptStack.prototype.OP_MUL = function () {
    this.push(this.pop().multiply(this.pop()));
  };

  ScriptStack.prototype.OP_DIV = function () {
    var divisor = this.pop();
    var dividend = this.pop();
    this.push(dividend.divide(divisor));
  };

  ScriptStack.prototype.OP_MOD = function () {
    var divisor = this.pop();
    var dividend = this.pop();
    this.push(dividend.mod(divisor));
  };

  ScriptStack.prototype.OP_LSHIFT = function () {
    var numBits = this.pop();
    var value = this.pop();
    this.push(value.shiftLeft(numBits));
  };

  ScriptStack.prototype.OP_RSHIFT = function () {
    var numBits = this.pop();
    var value = this.pop();
    this.push(value.shiftRight(numBits));
  };

  ScriptStack.prototype.OP_BOOLAND = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(0) !== 0 && b.compare(0) !== 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_BOOLOR = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(0) !== 0 || b.compare(0) !== 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_NUMEQUAL = function () {
    this.OP_EQUAL();
  };

  ScriptStack.prototype.OP_NUMNOTEQUAL = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) !== 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_LESSTHAN = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) < 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_GREATERTHAN = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) > 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_LESSTHANOREQUAL = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) <= 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_GREATERTHANOREQUAL = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) >= 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_MIN = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) <= 0) {
      this.push(a);
    } else {
      this.push(b);
    }
  };

  ScriptStack.prototype.OP_MAX = function () {
    var b = this.pop();
    var a = this.pop();
    if (a.compare(b) >= 0) {
      this.push(a);
    } else {
      this.push(b);
    }
  };

  ScriptStack.prototype.OP_WITHIN = function () {
    var max = this.pop();
    var min = this.pop();
    var x = this.pop();
    if (x.compare(min) >= 0 && x.compare(max) < 0) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_RIPEMD160 = function () {
    this.push(crypto.ripemd160(this.pop()));
  };

  ScriptStack.prototype.OP_SHA1 = function () {
    this.push(crypto.sha1(this.pop()));
  };

  ScriptStack.prototype.OP_SHA256 = function () {
    this.push(crypto.sha256(this.pop()));
  };

  ScriptStack.prototype.OP_HASH160 = function () {
    this.push(crypto.ripemd160(crypto.sha256(this.pop())));
  };

  ScriptStack.prototype.OP_HASH256 = function () {
    this.push(crypto.sha256(crypto.sha256(this.pop())));
  };

  ScriptStack.prototype.OP_CHECKSIG = function () {
    // Parse public key
    var pubKey = crypto.processPubKey(this.pop());

    // Parse signature
    var signature = crypto.processSignature(this.pop());

    // Verify signature
    if (crypto.verifySignature(signature, pubKey)) {
      this.OP_1();
    } else {
      this.OP_0();
    }
  };

  ScriptStack.prototype.OP_CHECKMULTISIG = function () {
    // Extract public keys
    var numPubKeys = this.pop();
    var pubKeys = [];
    var i = 0;
    while (numPubKeys.compare(i) === 1) {
      pubKeys.push(crypto.processPubKey(this.pop()));
      i++;
    }

    // Extract signatures
    var numSignatures = this.pop();
    var signatures = [];
    i = 0;
    while (numSignatures.compare(i) === 1) {
      signatures.push(crypto.processSignature(this.pop()));
      i++;
    }

    // Match keys against signatures. Note that any public key that
    // fails a comparison is then removed, in accordance with the spec.
    for (i = 0; i < signatures.length; i++) {
      var matched = -1;
      for (var j = 0; j < pubKeys.length; j++) {
        if (crypto.verifySignature(signatures[i], pubKeys[j])) {
          matched = j;
          break;
        }
      }

      if (matched === -1) {
        this.OP_0();
        return;
      } else {
        // Remove used public keys
        pubKeys = pubKeys.splice(matched + 1);
      }

      var remainingSignatures = signatures.length - (i + 1);
      if (pubKeys.length < remainingSignatures) {
        this.OP_0();
        return;
      }
    }

    // If all checks passed, push `true`
    this.OP_1();
  };

  ScriptStack.prototype.OP_VERIFY = function () {
    return (this.pop().compare(0) !== 0);
  };

  ScriptStack.prototype.OP_EQUALVERIFY = function () {
    this.OP_EQUAL();
    return this.OP_VERIFY();
  };

  ScriptStack.prototype.OP_CHECKSIGVERIFY = function () {
    this.OP_CHECKSIG();
    return this.OP_VERIFY();
  };

  ScriptStack.prototype.OP_CHECKMULTISIGVERIFY = function () {
    this.OP_CHECKMULTISIG();
    return this.OP_VERIFY();
  };

  ScriptStack.prototype.OP_RETURN = function () {
    return false;
  };

  return ScriptStack;
})();

;

module.exports = ScriptStack;